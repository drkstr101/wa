import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import static org.gradle.api.tasks.testing.logging.TestLogEvent.*

plugins {
  id 'wa.java-conventions'
  id 'application'
  id "com.github.johnrengelman.shadow" version "7.0.0"
}


repositories {
  mavenCentral()
}

ext {
	vertxVersion = "4.2.5"
	junitJupiterVersion = "5.7.0"
	
	mainVerticleName = "wa.server.MainVerticle"
	launcherClassName = "io.vertx.core.Launcher"
	
	watchForChange = "src/**/*"
	doOnChange = "${projectDir}/gradlew classes"
}

application {
  mainClass.set(launcherClassName)
}

dependencies {
  implementation(platform("io.vertx:vertx-stack-depchain:$vertxVersion"))
  implementation("io.vertx:vertx-web-client")
  implementation("io.vertx:vertx-auth-jwt")
  implementation("io.vertx:vertx-service-proxy")
  implementation("io.vertx:vertx-web")
  implementation("io.vertx:vertx-service-discovery")
  implementation("io.vertx:vertx-json-schema")
  implementation("io.vertx:vertx-rx-java3")
  implementation("io.vertx:vertx-auth-oauth2")
  implementation("io.vertx:vertx-tcp-eventbus-bridge")
  implementation("io.vertx:vertx-sockjs-service-proxy")
  implementation("io.vertx:vertx-config")
  implementation("io.vertx:vertx-web-graphql")
  implementation("io.vertx:vertx-pg-client")
  implementation("io.vertx:vertx-web-sstore-cookie")
  testImplementation("io.vertx:vertx-junit5")
  testImplementation("org.junit.jupiter:junit-jupiter:$junitJupiterVersion")
}

tasks.withType(ShadowJar) {
  archiveClassifier.set("fat")
  manifest {
    attributes "Main-Verticle": mainVerticleName
  }
  mergeServiceFiles()
}

tasks.withType(Test) {
  useJUnitPlatform()
  testLogging {
    events = [PASSED, SKIPPED, FAILED]
  }
}

tasks.withType(JavaExec) {
  args = ["run", mainVerticleName, "--redeploy=$watchForChange", "--launcher-class=$launcherClassName", "--on-redeploy=$doOnChange"]
}
